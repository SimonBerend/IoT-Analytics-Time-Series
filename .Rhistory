year_week != "2009 - 53" &
year_week != "2010 - 00" )
View(energy)
# group by month
en_month <- energy %>%
group_by(
# create one column for year - month
year_month = format(energy$DateTime,
"%Y - %b")) %>%
summarise(avg_wh_per_min_kitchen = round(mean(kitchen),
digits = 2),
avg_wh_per_min_laundry = round(mean(laundry),
digits = 2),
avg_wh_per_min_climat = round(mean(climat),
digits = 2),
avg_wh_per_min_total_subs = round(mean(total_subs),
digits = 2),
avg_wh_per_min_global = round(mean(global_wh),
digits = 2),
avg_kw_global = round(mean(global_kw),
digits = 2)
)
View(en_month)
?format
str(en_month)
?strftime
# group by month
en_month <- energy %>%
group_by(
# create one column for year - month
year_month = format(energy$DateTime,
"%Y - %m")) %>%
summarise(avg_wh_per_min_kitchen = round(mean(kitchen),
digits = 2),
avg_wh_per_min_laundry = round(mean(laundry),
digits = 2),
avg_wh_per_min_climat = round(mean(climat),
digits = 2),
avg_wh_per_min_total_subs = round(mean(total_subs),
digits = 2),
avg_wh_per_min_global = round(mean(global_wh),
digits = 2),
avg_kw_global = round(mean(global_kw),
digits = 2)
)
## Create TS object with for climat weekly
ts_climat_weekly <- ts(en_week$avg_wh_per_min_climat,
frequency=52,
start=c(2007,1))
## Create TS object with for climat weekly
ts_week_climat <- ts(en_week$avg_wh_per_min_climat,
frequency=52,
start=c(2007,1))
## Create TS object with for kitchen weekly
ts_week_kitchen <- ts(en_week$avg_wh_per_min_kitchen,
frequency=52,
start=c(2007,1))
## Plot sub-meter 3 with autoplot - add labels, color
autoplot(ts_week_climat,
ts.colour = 'darkred',
xlab = "Time",
ylab = "Watt Hours",
main = "Climat Room") +
theme_bw()
## ts linear regression:
##  - ts_week_climat
## use summary() to obtain the forecast's R2 and RMSE
fit_week_climat <- tslm(ts_week_climat ~ trend + season)
summary(fit_sub3)
tail(en_week)
summary(fit_week_climat)
?forecast
## Forecast : week climat
## 5 weeks left in 2010: Forecast 5 time periods ahead
## confidence levels 80 and 90
fc_fit_week_climat <- forecast(fit_week_climat,
h=5,
level=c(80,90))
## Plot climat fc for end 2010
plot(fc_fit_week_climat,
#ylim = c(0, 30),
ylab = "avg Watt-Hours per minute",
xlab ="Time",
main = "Forecast: Climat Room")
?plot
## Plot climat fc for end 2010
plot(fc_fit_week_climat,
#ylim = c(0, 30),
xlim = c(2010, 2011)
ylab = "avg Watt-Hours per minute",
xlab ="Time",
main = "Forecast: Climat Room",
)
## Plot climat fc for end 2010
plot(fc_fit_week_climat,
#ylim = c(0, 30),
xlim = c(2010, 2011),
ylab = "avg Watt-Hours per minute",
xlab ="Time",
main = "Forecast: Climat Room",
)
## Decompose : climat - week
## trend, seasonal and remainder
comp_week_climat <- decompose(ts_week_climat)
## Plot decomposed sub-meter 3
plot(comp_week_climat)
## Check summary statistics for decomposed sub-meter 3
summary(comp_week_climat)
## adjust original ts set for seasonality
ts_week_climat_adj_season <- ts_week_climat - comp_week_climat$seasonal
## Test Seasonal Adjustment by running Decompose again.
## Note the very, very small scale for Seasonal
plot(decompose(ts_week_climat_adj_season))
## Holt Winters Exponential Smoothing & Plot
ts_week_climat_hw <- HoltWinters(ts_week_climat_adj_season,
beta = FALSE,
gamma = FALSE)
plot(ts_week_climat_hw,
#ylim = c(0, 25)
)
## Holt Winters Exponential Smoothing & Plot
ts_hw_week_climat <- HoltWinters(ts_week_climat_adj_season,
beta = FALSE,
gamma = FALSE)
plot(ts_hw_week_climat,
#ylim = c(0, 25)
)
## HoltWinters forecast & plot
## USE FOR TREND
## with deinished confidence levels
fc_hw_week_climat <- forecast(ts_week_climat_hw,
h=25,
level = c(10, 25))
plot(fc_hw_week_climat,
ylim = c(0, 20),
ylab= " avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room",
sub = "Smooth HW Forecast"
#, start (2009)
)  ## How does this start work?
plot(fc_hw_week_climat,
ylim = c(0, 20),
ylab= " avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room",
sub = "Smooth HW Forecast",
start (2010))  ## How does this start work?
plot(fc_hw_week_climat,
ylim = c(0, 20),
ylab= " avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room",
sub = "Smooth HW Forecast",
start = 2010)  ## How does this start work?
## HoltWinters forecast & plot
## USE FOR TREND
## with deinished confidence levels
fc_hw_week_climat <- forecast(ts_week_climat_hw,
h=5,
level = c(10, 25))
plot(fc_hw_week_climat,
ylim = c(0, 10),
xlim = c(2010, 2011),
ylab= "avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room")
plot(fc_hw_week_climat,
ylim = c(5, 10),
xlim = c(2010, 2011),
ylab= "avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room")
plot(fc_hw_week_climat,
ylim = c(5, 10),
xlim = c(2010, 2011),
ylab= "avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room")
plot(fc_hw_week_climat,
ylim = c(5, 10),
xlim = c(2010.6, 2011),
ylab= "avg Watt-Hours per Minute",
xlab="Time",
main = "Climat Room")
####################################
##         CREATE TS OBJECTS      ##
##  for subsets / total / global  ##
####################################
## Create TS object with for climat weekly
ts_month_climat <- ts(en_month$avg_wh_per_min_climat,
frequency=12,
start=c(2007,1))
# Kitchen
ts_month_kitchen <- ts(en_month$avg_wh_per_min_kitchen,
frequency=12,
start=c(2007,1))
# Laundry
ts_month_laundry <- ts(en_month$avg_wh_per_min_laundry,
frequency=12,
start=c(2007,1))
View(en_month)
# total subs
ts_month_subs <- ts(en_month$avg_wh_per_min_total_subs,
frequency=12,
start=c(2007,1))
# total subs
ts_month_total <- ts(en_month$avg_wh_per_min_total_subs,
frequency=12,
start=c(2007,1))
#global
ts_month_global <- ts(en_month$avg_wh_per_min_global,
frequency=12,
start=c(2007,1))
## autoplot: climat - week
autoplot(ts_month_global,
ts.colour = 'darkred',
xlab = "Time",
ylab = "avg Watt Hours per Minute",
main = "Climat Room") +
theme_bw()
## Decompose : get trends from different meters
dc_month_climat <- decompose(ts_month_climat)
dc_month_kitchen <- decompose(ts_month_kitchen)
dc_month_laundry <- decompose(ts_month_laundry)
dc_month_total <- decompose(ts_month_total)
dc_month_global <- decompose(ts_month_global)
plot(dc_month_total)
summary(dc_month_total)
plot(dc_month_total)
ts_month <- en_month[2:6] %>% ts(frequency = 12,
start = c(2007, 1))
dc_month <- decompose(ts_month)
summary(dc_month)
plot(dc_month)
plot(dc_month$trend)
?decompose
View(dc_month)
plot(dc_month$trend)
plot(dc_month_kitchen$trend)
plot(dc_month_kitchen)
ts.plot(dc_month$trend)
ts.plot(x = c(dc_month_climat, dc_month_kitchen, dc_month_laundry))
dc_subs <-  c(dc_month_climat, dc_month_kitchen, dc_month_laundry)
View(dc_subs)
ts.plot(dc_subs$trend)
ts.plot(dc_month$trend,gpars= list(col=rainbow(5)))
ts_month_general <- en_month[5:6] %>% ts(frequency = 12,
start = c(2007, 1))
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(5)))
dc_month_general <- decompose(ts_month_general)
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(5)))
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(5)))
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(2)))
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(3)))
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(4)))
ts.plot(dc_month_general$trend,gpars= list(col= "red")
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(2)))
ts.plot(dc_month_general$trend,gpars= list(col=rainbow(2)))
ts.plot(dc_month_general$trend, dc_month$trend, gpars= list(col=rainbow(7)))
?ts.plot
colnames(ts_month) <- c(colnames(energy[4:8]))
dc_month <- decompose(ts_month)
ts.plot(dc_month$trend,
gpars= list(col = rainbow(5),
xlab = "year",
ylab = "avg Wh per Minute"))
plot(dc_month$trend)
plot(dc_month_trend,
plot.type="single",
col = 1:ncol(dc_month_trend)) +
legend("bottomleft",
colnames(dc_month_trend),
col=1:ncol(dc_month_trend),
lty=1, cex=.65)
plot(dc_month$trend,
plot.type="single",
col = 1:ncol(dc_month$trend)) +
legend("bottomleft",
colnames(dc_month$trend),
col = 1:ncol(dc_month$trend),
lty = 1, cex = .65)
ts.plot(dc_month$trend,
gpars= list(col = rainbow(5),
xlab = "year",
ylab = "avg Wh per Minute"))
legend("topleft", legend = 1:5, col = 1:5, lty = 1)
View(ts_month)
str
str(dc_month)
ts.plot(dc_month$trend,
gpars= list(col = dc_month$trend[,1:5],
xlab = "year",
ylab = "avg Wh per Minute"))
legend("topleft",
legend = dc_month$trend[,1:5],
col = dc_month$trend[,1:5],
lty = 1)
ts.plot(dc_month$trend,
gpars= list(col = dc_month$trend[,1:5],
xlab = "year",
ylab = "avg Wh per Minute"))
legend("topleft",
legend = colnames(dc_month$trend),
col = dc_month$trend,
lty = 1)
ts.plot(dc_month$trend,
gpars= list(col = dc_month$trend,
xlab = "year",
ylab = "avg Wh per Minute"))
legend("topleft",
legend = colnames(dc_month$trend),
col = dc_month$trend,
lty = 1)
plot(dc_month$trend, plot.type="single", col = 1:ncol(dc_month$trend))
legend("bottomleft", colnames(dc_month$trend), col=1:ncol(dc_month$trend), lty=1, cex=.65)
install.packages("xtsExtra")
library(xtsExtra)
install.pacages("hchart")
install.packages("hchart")
install.packages("highcharter")
library(highcharter)
hchart(dc_month$trend)
?hchart
?forecast
fc_month_trend <- forecast(auto.arima(dc_month$trend),
h = 3
level = 90)
fc_month_trend <- forecast(auto.arima(dc_month$trend),
h = 3,
level = 90)
fc_month_trend_global <- forecast(auto.arima(dc_month_global$trend),
h = 3,
level = 90)
hchart(fc_month_trend_global)
fc_month_trend_global <- forecast(auto.arima(dc_month_global$trend),
h = 8,
level = 90)
hchart(fc_month_trend_global)
fc_month_trend_global <- forecast(auto.arima(dc_month_global$trend),
h = 8,
level = 95)
hchart(fc_month_trend_global)
?hchart
?forecast
fc_month_trend_global <- forecast(HoltWinters(dc_month_global$trend),
h = 8,
level = 95)
fc_month_trend_global <- forecast(snaive(dc_month_global$trend),
h = 8,
level = 95)
fc_month_trend_global <- forecast(snaive(dc_month_global$trend),
h = 8,
level = 90)
fc_month_trend_global <- forecast(auto.arima(dc_month_global$trend),
h = 8)
hchart(fc_month_trend_global)
fc_month_trend_global <- forecast(auto.arima(dc_month_global$trend),
h = 8,
level = 90)
hchart(fc_month_trend_global)
fc_month_trend_total <- forecast(auto.arima(dc_month_total$trend),
h = 8,
level = 90))
fc_month_trend_total <- forecast(auto.arima(dc_month_total$trend),
h = 8,
level = 90)
hc <- highchart() %>%
hc_title(text = "Energy Trends") %>%
hc_subtitle(text = "Trend and Predictions for different Meter Levels") %>%
hc_add_series(fc_month_trend_global, id = "Global Usage") %>%
hc_add_series(fc_month_trend_total, id = "Total of 3 Sub-Meters")
hc
hc <- highchart() %>%
hc_title(text = "Energy Consumption: Trends and Predictions") %>%
hc_subtitle(text = "in Wh per Minute") %>%
hc_add_series(fc_month_trend_global, id = "Global Usage") %>%
hc_add_series(fc_month_trend_total, id = "Total of 3 Sub-Meters")
?highchart
hc <- highchart() %>%
hc_title(text = "Energy Consumption: Trends and Predictions") %>%
hc_subtitle(text = "in Wh per Minute") %>%
hc_add_series(dc_month_climat$trend, id = "Global Usage") %>%
hc_add_series(dc_month_laundry$trend, id = "Total of 3 Sub-Meters")
hc
dc_month
plot(dc_month)
plot(dc_month_climat)
head(energy)
str(energy$DateTime)
tail(energy)
###  SUBSET for Months
# group by month
en_month <- energy %>%
filter(DateTime > "2007-10-31 23:59:00") %>%
group_by(
# create one column for year - month
year_month = format(energy$DateTime,
"%Y - %m")) %>%
summarise(avg_wh_per_min_kitchen = round(mean(kitchen),
digits = 2),
avg_wh_per_min_laundry = round(mean(laundry),
digits = 2),
avg_wh_per_min_climat = round(mean(climat),
digits = 2),
avg_wh_per_min_total_subs = round(mean(total_subs),
digits = 2),
avg_wh_per_min_global = round(mean(global_wh),
digits = 2),
avg_kw_global = round(mean(global_kw),
digits = 2)
)
###  SUBSET for Months
# group by month
en_month <- energy %>%
filter(DateTime > "2007-10-31 23:59:00") %>%
group_by(
# create one column for year - month
year_month = format(DateTime,
"%Y - %m")) %>%
summarise(avg_wh_per_min_kitchen = round(mean(kitchen),
digits = 2),
avg_wh_per_min_laundry = round(mean(laundry),
digits = 2),
avg_wh_per_min_climat = round(mean(climat),
digits = 2),
avg_wh_per_min_total_subs = round(mean(total_subs),
digits = 2),
avg_wh_per_min_global = round(mean(global_wh),
digits = 2),
avg_kw_global = round(mean(global_kw),
digits = 2)
)
####################################
##         CREATE TS OBJECTS      ##
##  for subsets / total / global  ##
####################################
# Climat
ts_month_climat <- ts(en_month$avg_wh_per_min_climat,
frequency=12,
start=c(2007,11))
# Kitchen
ts_month_kitchen <- ts(en_month$avg_wh_per_min_kitchen,
frequency=12,
start=c(2007,11))
# Laundry
ts_month_laundry <- ts(en_month$avg_wh_per_min_laundry,
frequency=12,
start=c(2007,11))
# total subs
ts_month_total <- ts(en_month$avg_wh_per_min_total_subs,
frequency=12,
start=c(2007,11))
#global
ts_month_global <- ts(en_month$avg_wh_per_min_global,
frequency=12,
start=c(2007,11))
ts_month <- en_month[2:6] %>% ts(frequency = 12,
start = c(2007, 11))
# global and total
ts_month_general <- en_month[5:6] %>% ts(frequency = 12,
start = c(2007, 11))
plot(ts_month_climat)
##############################
##      DECOMPOSE           ##
##############################
## Decompose : get trends from different meters
## use plot() & summary() to inspect
dc_month_climat <- decompose(ts_month_climat)
dc_month_kitchen <- decompose(ts_month_kitchen)
dc_month_laundry <- decompose(ts_month_laundry)
dc_month_total <- decompose(ts_month_total)
dc_month_global <- decompose(ts_month_global)
## plot trends
ts.plot(dc_month_climat$trend, dc_month_kitchen$trend,
dc_month_laundry$trend, dc_month_total$trend,
dc_month_global$trend,
gpars= list(col = rainbow(5),
xlab = "year",
ylab = "avg Wh per Minute",
))
## plot trends
ts.plot(dc_month_climat$trend, dc_month_kitchen$trend,
dc_month_laundry$trend, dc_month_total$trend,
dc_month_global$trend,
gpars= list(col = rainbow(5),
xlab = "year",
ylab = "avg Wh per Minute"
))
plot(dc_month_climat)
fc_month_trend_climat <- forecast(auto.arima(dc_month_climat$trend),
h = 8,
level = 90)
hchart(fc_month_trend_climat)
View(en_month)
# all meters
ts_month <- en_month[2:6] %>% ts(frequency = 12,
start = c(2007, 11))
dc_month <- decompose(ts_month)
fc_month_trend <- forecast(auto.arima(dc_month$trend),
h = 8,
level = 90)
plot(fc_month_trend)
fc_month_trend <- forecast(tslm(dc_month$trend),
h = 8,
level = 90)
fc_month_trend <- forecast(auto.arima(ts_month$trend),
h = 8,
level = 90)
fc_month <- forecast(auto.arima(ts_month),
h = 8,
level = 90)
