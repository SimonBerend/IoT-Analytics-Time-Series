for(i in 1:nrow(energy)) {
if(is.na(energy$laundry[i])) {
#create empty data frame with same columns as energy
check_i <- as.data.frame(energy[0,])
# if possible, bind rows of one week before and after
if(i > 10080){
check_i <- rbind(check_i, energy[i - 10080,])}
if(i < (nrow(energy) - 10080)) {
check_i <- rbind(check_i, energy[i + 10080,])}
# calculate the mean of the variables added to the empty df
mean_i_kitchen <- mean(check_i$kitchen, na.rm = TRUE)
mean_i_laundry <- mean(check_i$laundry, na.rm = TRUE)
mean_i_climat <- mean(check_i$climat, na.rm = TRUE)
mean_i_global_kw <- mean(check_i$global_kw, na.rm = TRUE)
# replace the NA in df with mean value
energy$kitchen[i] <- mean_i_kitchen
energy$laundry[i] <- mean_i_laundry
energy$climat[i] <- mean_i_climat
energy$global_kw[i] <- mean_i_global_kw
}
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:nrow(energy)) {
if(is.na(energy$Date[i])) {
energy$Date[i] <- as.Date(energy$DateTime[i], "%Y-%m-%d", tz = "CET")
}
}
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
for(i in 1:nrow(energy)) {
if(is.na(energy$Date[i])) {
energy$Date[i] <- as.Date(energy$DateTime[i], "%Y-%m-%d", tz = "CET")
}
}
end_time <- Sys.time()
end_time - start_time
summary(is.na(energy$Date))
str(energy$Date)
# convert Date column into Date data type
energy$Date <- as.Date(energy$Date,  "%Y-%m-%d", tz = "CET")
str(energy$Date)
summary(is.na(energy$Date))
head(is.na(energy$Date))
head(filter(is.na(energy$Date)))
energy %>% filter() %>% is.na(Date) %>% head()
energy %>% filter() %>% is.na(energy$Date) %>% head()
energy %>% filter(Date == NA) %>% head()
head(energy)
summary(is.na(energy$Date))
summary(is.na(energy$DateTime))
str(energy$Date)
for(i in 1:nrow(energy)) {
if(is.na(energy$Date[i])) {
energy$Date[i] <- as.Date(energy$DateTime[i], "%Y-%m-%d", tz = "CET")
}
}
summary(is.na(energy$Date))
# Create derivative values ------------------------------------------------
# create column "total_subs" with total submeter energy consumption
energy$total_subs <- energy$kitchen + energy$laundry + energy$climat
# transform "global" from kW to Wh
energy$global_wh <- round(energy$global_kw/60*1000,
digits = 1)
# reorder columns
energy <- energy[c("DateTime", "Date", "Time",
"kitchen", "laundry", "climat",
"total_subs", "global_wh", "global_kw")]
# Lubridate: create time attributes ---------------------------------------
energy$year <- year(energy$DateTime)
energy$quarter <- quarter(energy$DateTime)
energy$month <- month(energy$DateTime)
energy$week <- week(energy$DateTime)
## weekdays are unordered "characters"
## set them as an ordered factor
energy$weekday <- weekdays(energy$DateTime)
energy$weekday <- factor(energy$weekday,
levels = unique(energy$weekday),ordered=TRUE)
energy$day <- day(energy$DateTime)
energy$hour <- hour(energy$DateTime)
energy$minute <- minute(energy$DateTime)
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(Date) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1)) +
geom_smooth(aes(x = date, y = overall_avg,
span = 0.1, se = F)) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months")+
scale_x_date(date_breaks = "1 week", date_labels = "%W"))
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
str(year(energy$Date)
str(year(energy$Date))
x <- unique(year(energy$Date))
str(x)
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(DateTime) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1)) +
geom_smooth(aes(x = date, y = overall_avg,
span = 0.1, se = F)) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months")+
scale_x_date(date_breaks = "1 week", date_labels = "%W"))
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(DateTime) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = date, y = overall_avg,
span = 0.1, se = F)) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 week", date_labels = "%W")
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(DateTime) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg,
span = 0.1, se = F)) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 week", date_labels = "%W")
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(Date) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg,
span = 0.1, se = F)) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 week", date_labels = "%W")
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(Date) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 week", date_labels = "%W")
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
ggplot(data = energy %>%
filter(year(Date) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 week", date_labels = "%W")
ggplot(data = energy %>%
filter(year(Date) == 2008) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 week", date_labels = "%W")
ggplot(data = energy %>%
filter(year(Date) == 2008) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 month", date_labels = "%m")
ggplot(data = energy %>%
filter(year(Date) == 2008) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 month", date_labels = month.abb("%m"))
ggplot(data = energy %>%
filter(year(Date) == 2008) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
# Tweek the Server
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(Date) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
# Tweek the User Interface
ui <- dashboardPage(
dashboardHeader(
title = "Energy Dashboard"),
dashboardSidebar(
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
title = "Them Graphs",
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
))
# Show Dashboard
shinyApp(ui, server)
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Overview", tabName = "Overview",
icon = icon("tachometer")),
menuItem("Trends", tabName = "Trends",
icon = icon("line-chart"))
),
sliderInput(
inputId = "Breaks",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(
inputId = "SelectYear",
label = "Choose a year for the line chart to show:",
choices = list("2007", "2008", "2009", "2010"))
)
body <- dashboardBody(
tabItems(
tabItem(tabName = "Overview",
h2("Overview of Energy Consumption"),
box(plotOutput(outputId = "smooth_avg")),
box(plotOutput(outputId = "Histo_ActiveEnergy_avg"))
),
tabItem(tabName = "Trends",
h2("Trends and Predictions")
)
)
)
server <- function(input, output) {
output$smooth_avg <- renderPlot({
ggplot(data = energy %>%
filter(year(Date) == input$SelectYear) %>%
group_by(Date) %>%
summarise(overall_avg = round(mean(global_wh), digits = 1))
) +
geom_smooth(aes(x = Date, y = overall_avg),
span = 0.1, se = F) +
labs(title = "Yearly E-Consumption",
subtitle = "(Smoothened)",
y = "avg Consumption in Wh per Minute",
x = "Months") +
scale_x_date(date_breaks = "1 month", date_labels = "%b")
})
output$Histo_ActiveEnergy_avg <- renderPlot({
hist(dashdata$ActiveEnergy_avg,
breaks = input$Breaks,
main = "Distribution of Active E")
})
}
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "Your Energy"),
sidebar,
body
),
server
)
